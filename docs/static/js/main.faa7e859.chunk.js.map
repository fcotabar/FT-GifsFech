{"version":3,"sources":["components/AddCategory.js","helpers/fetchGif.js","components/GifGridItem.js","components/Loading.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputState","setInputState","onSubmit","e","preventDefault","trim","length","cat","onChange","target","value","type","fetchGif","category","a","url","encodeURI","fetch","resp","json","data","meta","message","status","gifs","map","id","title","images","downsized_medium","Error","GifGridItem","image","className","src","alt","Loading","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","catch","err","console","error","useFetchGifs","gridImages","log","img","GifExpertApp","categories","setCategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAIaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACVC,mBAAS,UADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACrCN,EAAc,MAKhB,SACE,uBAAOO,SAbS,SAACL,GAAD,OAAOF,EAAcE,EAAEM,OAAOC,QAahBC,KAAK,OAAOD,MAAOV,O,uBCpB1CY,EAAQ,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACpDH,GAFoB,wEAMDI,MAAMF,GANL,cAMdG,EANc,gBAOkBA,EAAKC,OAPvB,mBAOZC,EAPY,EAOZA,KAAMC,EAPM,EAONA,KAAMC,EAPA,EAOAA,SAEhBF,GAAwB,MAAhBC,EAAKE,OATG,wBAUZC,EAAOJ,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,MAA4B,CAChDF,KACAC,QACAZ,IAAG,OAAEa,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBd,QAbd,kBAgBXS,GAhBW,cAmBZ,IAAIM,MAAMR,GAnBE,gEAsBd,IAAIQ,MAAJ,MAtBc,0DAAH,sDCERC,EAAc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC5B,OACE,sBAAKC,UAAU,yDAAf,UACE,qBAAKC,IAAKF,EAAMjB,IAAKoB,IAAKH,EAAML,QAChC,4BAAIK,EAAML,YCJHS,EAAU,WACrB,OACE,qBAAKH,UAAU,SAAf,SACE,+CCCOI,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCuC,SAAS,EACTlB,KAAM,KAHgC,mBACjCmB,EADiC,KAC1BC,EAD0B,KAmBxC,OAbAC,qBAAU,WACRC,YAAW,WACT9B,EAASC,GACN8B,MAAK,SAACC,GAAD,OACJJ,EAAS,CACPF,SAAS,EACTlB,KAAK,YAAKwB,QAGbC,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,QAC/B,OACF,CAACjC,IAEG0B,EDf+BU,CAAapC,GAArCqC,EADyB,EAC/B9B,KAAkBkB,EADa,EACbA,QAI1B,OAFAS,QAAQI,IAAID,GAGV,sBAAKjB,UAAU,eAAf,UACE,6BAAKpB,IACJyB,GAAW,cAAC,EAAD,IACZ,qBAAKL,UAAU,WAAf,SACGiB,EAAWzB,KAAI,SAAC2B,GAAD,OACd,cAAC,EAAD,CAA0BpB,MAAOoB,GAAfA,EAAI1B,aEbnB2B,EAAe,WAAO,IAAD,EACItD,mBAAS,CAAC,WADd,mBACzBuD,EADyB,KACbC,EADa,KAGhC,OACE,gCACE,4CACA,cAAC,EAAD,CAAazD,YAAayD,IAC1B,uBACA,kCACGD,EAAW7B,KAAI,SAAClB,GAAD,OACd,cAAC,EAAD,CAAmBM,SAAUN,GAAfA,YCRxBiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.faa7e859.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategory }) => {\n  const [inputState, setInputState] = useState('Hinata');\n\n  const handleInput = (e) => setInputState(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputState.trim().length > 2) {\n      setCategory((cat) => [inputState, ...cat]);\n      setInputState('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleInput} type=\"text\" value={inputState} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n};\n","export const fetchGif = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=AuSp1XRXDUDvgf88uClXUb8y2AsfJ1oj`;\n\n  try {\n    const resp = await fetch(url);\n    const { data, meta, message } = await resp.json();\n\n    if (data && meta.status === 200) {\n      const gifs = data.map(({ id, title, images }) => ({\n        id,\n        title,\n        url: images?.downsized_medium.url,\n      }));\n\n      return gifs;\n    } else {\n      // console.log(meta.status);\n      throw new Error(message);\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ image }) => {\n  return (\n    <div className=\"gif-image-item animate__animated animate__bounceInDown\">\n      <img src={image.url} alt={image.title} />\n      <p>{image.title}</p>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Loading = () => {\n  return (\n    <div className=\"loader\">\n      <h1>Loading...</h1>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nimport { Loading } from './Loading';\n\nexport const GifGrid = ({ category }) => {\n  const { data: gridImages, loading } = useFetchGifs(category);\n\n  console.log(gridImages);\n\n  return (\n    <div className=\"gif-category\">\n      <h2>{category}</h2>\n      {loading && <Loading />}\n      <div className=\"gif-grid\">\n        {gridImages.map((img) => (\n          <GifGridItem key={img.id} image={img} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { fetchGif } from '../helpers/fetchGif';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    loading: true,\n    data: [],\n  });\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetchGif(category)\n        .then((imgs) =>\n          setState({\n            loading: false,\n            data: [...imgs],\n          })\n        )\n        .catch((err) => console.error(err));\n    }, 2000);\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Naruto']);\n\n  return (\n    <div>\n      <h1>Gif Expert</h1>\n      <AddCategory setCategory={setCategories} />\n      <hr />\n      <section>\n        {categories.map((cat) => (\n          <GifGrid key={cat} category={cat} />\n        ))}\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}